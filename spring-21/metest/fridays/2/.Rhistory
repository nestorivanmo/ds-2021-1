graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = gg2.col(100, alpha = 1))
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1))
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1), resfac=2)
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1), resfac=10)
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1), resfac=c(10,100))
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1), resfac=c(10,100))
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
generate_Y <- function(X, mu, sigma) {
E <- eigen(sigma)
M <- E$vectors * sqrt(E$values)
return (M %*% X + mu)
}
generate_3DHist <- function(data) {
X <- data[,1]
Y <- data[,2]
Z <- table(cut(X, 20), cut(Y, 20))
hist3D(z=Z, theta=55, phi=20, col = jet.col(100, alpha = 1), contour = TRUE)
}
generate_heatmap <- function(data) {
X <- data[,1]
Y <- data[,2]
hm <- ggplot(as.data.frame(data), aes(x=X, y=Y) ) +
geom_bin2d(bins=19) +
geom_point(color="transparent")
theme_bw()
h1 <- ggMarginal(hm, type = "histogram", fill = '#273763')
h1
}
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
#generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
graph_mult <- function(n, mu, sigma) {
mult <- matrix(0, nrow = n, ncol = 2)
for (i in 1:n) {
X <- rnorm(2)
Y <- generate_Y(X, mu, sigma)
mult[i,] = Y
}
generate_3DHist(mult)
generate_heatmap(mult)
}
N <- 3000
mu <- matrix(c(0,0), 2, 1)
sigma <- matrix(c(1,0,0,1), 2, 2)
graph_mult(N, mu, sigma)
mu <- matrix(c(1,0), 2, 1)
sigma <- matrix(c(1,0.7,0.7,1), 2, 2)
graph_mult(N, mu, sigma)
mu <- matrix(c(1,0), 2, 1)
sigma <- matrix(c(1,0.7,0.7,1), 2, 2)
graph_mult(N, mu, sigma)
moving_average <- function(serie, n){
m <- mean(serie[-(1:n)]);
return(m);
}
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
View(data_ads)
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
mean(data_ads$Ads)
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
s
s[1:]
s[1:2]
s <- 1:6
s[-4:1]
s[1:2]
s
s[4:6]
s[-(1:2)]
length(s) - 4
moving_average <- function(serie, n){
m <- mean(serie[-(1:length(serie) - n)]);
return(m);
}
source('~/Desktop/test.r', echo=TRUE)
source('~/Desktop/test.r', echo=TRUE)
data_ads$Ads[-(1:length(data_ads$Ads)-24)]
data_ads$Ads
s <- data_ads$Ads
s
s[1:2]
s[200:211]
s[200:length(s)]
mean(s[200:length(s)])
length(s)
mean(s[-(1:216-24)])
216-25
216-24
mean(s[-(1:192)])
moving_average <- function(serie, n){
max <- length(serie) - n;
m <- mean(serie[-(1:max)]);
return(m);
}
moving_average(data_ads$Ads, 24)
exponential_smoothing <- function(serie, w){
result <- c(serie[0]);
for(n in 2:length(serie)){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing <- function(serie, alpha){
result <- c(serie[0]);
for(n in 2:length(serie)){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing <- function(serie, alpha){
result <- c(serie[0]);
for(n in 2:3){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
print(result);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing <- function(serie, alpha){
result <- c(serie[0]);
print(result);
for(n in 2:3){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
print(result);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing <- function(serie, alpha){
result <- c(serie[0]);
print(result, serie[0]);
for(n in 2:3){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
print(result);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing(data_ads$Ads, 0.3)
data_ads$Ads[0]
data_ads$Ads[0]:
data_ads$Ads[0];
print(data_ads$Ads[0]);
print(data_ads$Ads[0])
print(data_ads$Ads[0])
exponential_smoothing <- function(serie, alpha){
result <- c(serie[1]);
for(n in 2:length(serie)){
print(result);
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
}
return(result);
}
exponential_smoothing(data_ads$Ads, 0.3)
exponential_smoothing(data_ads$Ads, 0.3)[1:9]
exponential_smoothing(data_ads$Ads, 0.3)[1:2]
exponential_smoothing <- function(serie, alpha){
result <- c(serie[1]);
for(n in 2:length(serie)){
op <- alpha * serie[n] + (1 - alpha) * result[n-1];
result <- c(result, op);
}
return(result);
}
plot_exponential_smoothing <- function(serie, alphas) {
plot(x, y, type="l", main="Suavizado Exponencial",
xlab="Tiempo", ylab="Anuncios por hora", col = "red");
for (alpha in alphas) {
grid()
lines(x, y, type="l")
}
}
plot_exponential_smoothing(data_ads$Ads, c(0.3, 0.5))
plot_exponential_smoothing <- function(serie, alphas) {
x <- 1:length(serie);
plot(x, serie, type="l", main="Suavizado Exponencial",
xlab="Tiempo", ylab="Anuncios por hora", col = "red");
grid();
for (alpha in alphas) {
y <- exponential_smoothing(serie, alpha);
lines(serie, y, type="l");
}
}
plot_exponential_smoothing(data_ads$Ads, c(0.3, 0.5))
plot_exponential_smoothing <- function(serie, alphas) {
x <- 1:length(serie);
plot(x, serie, type="l", main="Suavizado Exponencial",
xlab="Tiempo", ylab="Anuncios por hora", col = "red");
grid();
for (alpha in alphas) {
y <- exponential_smoothing(serie, alpha);
lines(x, y, type="l");
}
}
plot_exponential_smoothing(data_ads$Ads, c(0.3, 0.5))
help("lines")
plot_exponential_smoothing(data_ads$Ads, c(.3,.5))
plot_exponential_smoothing <- function(serie, alphas) {
x <- 1:length(serie);
plot(x, serie, type="l", main="Suavizado Exponencial",
xlab="Tiempo", ylab="Anuncios por hora", col = "red");
grid();
colores <- c("blue", "green")
for (i in 1:2) {
y <- exponential_smoothing(serie, alphas[i]);
lines(x, y, type="l", col = colores[i]);
}
}
plot_exponential_smoothing(data_ads$Ads, c(.3,.5))
library(mlbench)
data(PimaIndiansDiabetes2)
BD <- PimaIndiansDiabetes2
head(BD)
dim(BD)
dim(BD)
dim(BD)
N <- nrow(BD) # Tama?o de la poblaci?n
n <- 20 # muestra
id <- sample.int(N, n, replace = TRUE)
sample.int(N, n, replace = TRUE)
id <- sample.int(N, n, replace = TRUE)
id
BD[id, ]
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
library(data.table)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
install.packages("data.table")
install.packages("data.table")
library(data.table)
path <- file.path("~", "Data", "basketball.csv")
data <- fread(path)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
data %>%
arrange(-REB) %>%
select(Player, Team, REB) %>%
head(5)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
install.packages(tidyr)
source('~/Desktop/iimas-data-science/spring-21/metest/fridays/2/code.R', echo=TRUE)
summary(data$Player)
data %>%
filter(Team %in% c('LAL', 'GSW', 'HOU')) %>%
group_by(Team) %>%
summarise(Media = round(mean(PTS), 1)) %>%
as.data.frame()
path <- file.path("~", "/Desktop/iimas-data-science/spring-21/metest/fridays/2", "basketball.csv")
data <- fread(path)
summary(data)
library(tidyverse)
library(tidyr)
data %>%
arange(-REB) %>%
select(Player, Team, REB) %>%
head(5)
data %>%
arrange(-REB) %>%
select(Player, Team, REB) %>%
head(5)
