training_data <- data[training_row_idx, ]
test_data <- daata[-training_row_idx, ]
set.seed(100)
training_row_idx <- sample(1:nrow(data), 0.8*nrow(data))
training_data <- data[training_row_idx, ]
test_data <- data[-training_row_idx, ]
training_data
nrows(training_data)
nrow(training_data)
nrow(test_data)
nrow(data)
test_data
lmMod <- lm(y ~ x8, data = training_data)
pred <- predict(lmMod, test_data)
summary(lmMod)
pred
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
head(actual_preds)
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
correlation_acc
head(actual_preds)
set.seed(100)
training_row_idx <- sample(1:nrow(data), 0.8*nrow(data))
training_data <- data[training_row_idx, ]
test_data <- data[-training_row_idx, ]
lmMod <- lm(y ~ x8, data = training_data)
pred <- predict(lmMod, test_data)
summary(lmMod)
print(lmMod)
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
correlation_acc
head(actual_preds)
actual_preds
min_max_acc <- mean(apply(actual_preds, 1, min) / apply(actual_preds, 1, max))
min_max_acc
mape <- mean(abs((actual_preds$predicted - actual_preds$actuals))/actual_preds$actuals)
mape
library(DAAG)
install.packages("DAAG")
library(DAAG)
install.packages("lattice")
library(DAAG)
install.packages("lattice")
install.packages("lattice")
library(DAAG)
getwd()
setwd("/Users/nestorivanmo/Desktop/iimas-data-science/spring-21/metest/tareas/2")
data <- read.csv('nfl.csv')
summary(data)
nrow(data)
ncol(data)
correlations <- c()
y <- data$y
col_idx <- c()
most_corr <- 0
most_corr_col_idx <- -1
for (i in 2:ncol(data)) {
corr <- cor.test(y, data[, i])$estimate
if (abs(corr) > abs(most_corr)){
most_corr <- corr
most_corr_col_idx <- i
}
correlations <- c(correlations, corr)
col_idx <- c(col_idx, i)
}
corr_df <- data.frame(col_idx, correlations)
corr_df <- corr_df[order(corr_df$correlations, decreasing=TRUE), ]
paste("La columna más correlacionada tiene índice", most_corr_col_idx, "con un valor de",
most_corr)
set.seed(100)
training_row_idx <- sample(1:nrow(data), 0.8*nrow(data))
training_data <- data[training_row_idx, ]
test_data <- data[-training_row_idx, ]
lmMod <- lm(y ~ x8, data = training_data)
pred <- predict(lmMod, test_data)
summary(lmMod)
print(lmMod)
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
correlation_acc
actual_preds
min_max_acc <- mean(apply(actual_preds, 1, min) / apply(actual_preds, 1, max))
min_max_acc
mape <- mean(abs((actual_preds$predicted - actual_preds$actuals))/actual_preds$actuals)
mape
library(DAAG)
scatter.smooth(x=data$x8, y=data$y)
plot(data$x8, data$y)
abline(lmMod)
gf_lm(y ~ x8, data=data) %>%
gf_point()
library(tidyverse)
library(ggplot2)
library(dplyr)
gf_lm(y ~ x8, data=data) %>%
gf_point()
coef(lmMod)
plot(data$x8, data$y)
abline(lmMod, col='red')
set.seed(100)
training_row_idx <- sample(1:nrow(data), 0.8*nrow(data))
training_data <- data[training_row_idx, ]
test_data <- data[-training_row_idx, ]
lmMod <- lm(y ~ x8, data = training_data)
pred <- predict(lmMod, test_data, interval = "prediction")
summary(lmMod)
print(lmMod)
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
correlation_acc
actual_preds
min_max_acc <- mean(apply(actual_preds, 1, min) / apply(actual_preds, 1, max))
min_max_acc
pred
abline(lmMod)
lines(test_data, pred[,2], col="red", lty=2)
lines(test_data, pred[,3], col="red", lty=2)
plot(test_data$x, test_data$y)
abline(lmMod)
lines(test_data, pred[,2], col="red", lty=2)
lines(test_data, pred[,3], col="red", lty=2)
plot(test_data$x8, test_data$y)
abline(lmMod)
lines(test_data, pred[,2], col="red", lty=2)
test_data
pred
plot(test_data$x8, test_data$y)
abline(lmMod)
lines(seq(min(test_data$x), max(test_data$x), by=1), pred[,2], col="red", lty=2)
lines(seq(min(test_data$x), max(test_data$x), by=1), pred[,3], col="red", lty=2)
min(test_data$x)
plot(test_data$x8, test_data$y)
abline(lmMod)
lines(seq(min(test_data$x8), max(test_data$x), by=1), pred[,2], col="red", lty=2)
lines(seq(min(test_data$x8), max(test_data$x), by=1), pred[,3], col="red", lty=2)
test_da
plot(test_data$x8, test_data$y)
abline(lmMod)
lines(seq(min(test_data$x8), max(test_data$x8), by=1), pred[,2], col="red", lty=2)
lines(seq(min(test_data$x8), max(test_data$x8), by=1), pred[,3], col="red", lty=2)
test_data$x8
max(test_data$x8)
min(test_data$x8)
newx <- seq(min(test_data$x8), max(test_data$x8), by=1)
newx
max(test_data$x8)
min(test_data$x8)
2577-1457
nrow(test_data)
(2577-1457)/6
plot(test_data$x8, test_data$y)
abline(lmMod)
newx <- seq(min(test_data$x8), max(test_data$x8), by=(2577-1457)/6)
lines(newx, pred[,2], col="red", lty=2)
lines(seq(nex, by=1), pred[,3], col="red", lty=2)
plot(test_data$x8, test_data$y)
abline(lmMod)
newx <- seq(min(test_data$x8), max(test_data$x8), by=(2577-1457)/6)
lines(newx, pred[,2], col="red", lty=2)
lines(newx, pred[,3], col="red", lty=2)
plot(test_data$x8, test_data$y)
abline(lmMod)
newx <- seq(min(test_data$x8), max(test_data$x8), by=((2577-1457)/6)+1)
lines(newx, pred[,2], col="red", lty=2)
lines(newx, pred[,3], col="red", lty=2)
plot(data$x, data$y,
main = "Scatterplot of x vs. y", #add title
pch=16, #specify points to be filled in
xlab='x', #change x-axis name
ylab='y') #change y-axis name
abline(lmMod, col='steelblue') #specify color of regression line
plot(data$x8, data$y,
main = "Scatterplot of x vs. y", #add title
pch=16, #specify points to be filled in
xlab='x', #change x-axis name
ylab='y') #change y-axis name
abline(lmMod, col='steelblue') #specify color of regression line
plot(test_data$x8, test_data$y,
main = "Scatterplot of x vs. y",
pch=16,
xlab='x',
ylab='y')
abline(lmMod, col='steelblue')
plot(data$x8, data$y,
main = "Scatterplot of x vs. y",
pch=16,
xlab='x',
ylab='y')
plot(data$x8, data$y,
main = "Scatterplot of x vs. y",
pch=16,
xlab='x',
ylab='y')
abline(lmMod, col='steelblue')
coef(lmMod)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
alpha <- 0.01
rech <- qnorm(1-alpha)
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.8)
t_x
p_value
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-2, 2, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
p_value > alpha # Aceptamos H0
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
Z
Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue")
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
ggplot(df, aes(x=x, y=y))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue")
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x))
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# Gráfica
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z))
x <- seq(-5, 5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
x <- seq(-5, 5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z))
z
Z
x <- seq(-4, 4, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z))
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z))
t_x
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# Gráfica
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# Gráfica
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x - 1)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x - 1)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x-1), fill = "lightpink", alpha = 0.5)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# Gráfica
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
x <- seq(-4.5, 4.5, by = 0.01)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# Gráfica
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
Z
Z_alfa
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dpois(x, lambda=15))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dpois(x, lambda=15))
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dpois(x, 15))
x
dpos(x)
dpois(x)
dpois(x, 15)
warnings()
x <- seq(0, 3, by = 1)
dpois(x, 15)
rech <- qnorm(1-alpha)
x <- seq(0, 30, by = 1)
df <- data.frame(x=x, y=dpois(x, 15))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue")
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue")
qpois(1-0.05, 15)
qpois(1-0.05, 10)
alfa = 0.05
lambda = 15
nueva_tasa = 10
pvalue = ppois(q=nueva_tasa, lambda=lambda)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa
(", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (",
alfa, ")")
}
# RESULTADO ---------------------------------
# No se puede rechazar H0 pues p-value > alfa
# pvalue = 0.118464411529015
# alfa = 0.05
# GRÁFICA -----------------------------------
rech <- qpois(1-alpha, lambda=15)
x <- seq(0, 30, by = 1)
df <- data.frame(x=x, y=dpois(x, 15))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = qpois(1-alpha, lambda=10))) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= qpois(1-alpha, lambda=10)), fill = "lightpink", alpha = 0.5)
