mu <- c(0,0)
sigma <-matrix(c(1,0,0,1),nrow=2,ncol=2,byrow=TRUE)
sigma
library(plot3D)
hist3D(z=table(sigma[1], sigma[2]))
hist3D(z=table(sigma[1], sigma[2]))
library(plot3D)
install.packages('XQuartz')
install.packages('plot3D', dependn)
install.packages('plot3D', dependncies=TRUE)
library(plot3D)
library(ggplot2)
theme_set(theme_minimal())
head(economics)
help('economics')
geom(data=economics, aex(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
ggplot(data=economics, aex(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
ggplot(data=economics, aex(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
ggplot(data=economics, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
help('economics')
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
sub <- subset(economics, date < as.Date('2006-1-1'))
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
sub <- subset(economics, date > as.Date('2006-1-1'))
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
sub <- subset(economics, date > as.Date('2010-1-1'))
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
sub <- subset(economics, date > as.Date('2015-1-1'))
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=2)
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=1)
sub <- subset(economics, date > as.Date('2016-1-1'))
sub <- subset(economics, date > as.Date('2006-1-1'))
ggplot(data=sub, aes(x=date, y=pop)) +
geom_line(color='#00AFBB', size=1)
ggplot(data=economics, aes(x=date, y=pop)) +
geom_line(aes(size=unemploy/pop), color='#FC4E07')
# Autocorrelación
acf(economics%pop, 50)
# Autocorrelación
acf(economics$pop, 50)
acf(economics$unempmed, 50)
acf(economics$uempmed, 50)
acf(economics$psavert, 50)
library(tidyr)
library(dplyr)
head(df)
df <- economics %>%
select(date, psavert, uempmed) %>%
gather(key='variable', value='value', -date)
head(df)
tail(df)
ggplot(df, aes(x=date, y=value)) +
geom_line(aes(color=variable), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07'))
theme_minimal(0
ggplot(df, aes(x=date, y=value)) +
geom_line(aes(color=variable), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_line(aes(color=variable), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5,
position_dodge(0.8))) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5,
position = position_dodge(0.8))) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
position = position_dodge(0.8)) +
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5, position), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable, alpha=0.5, position=position_dodge(0.8)), size=1) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.8)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.1)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
ggplot(df, aes(x=date, y=value)) +
geom_area(aes(color=variable, fill=variable), alpha=0.5,
position=position_dodge(0.8)) +
scale_color_manual(values=c('#00AFBB', '#FC4E07')) +
scale_fill_manual(values=c('#00AFBB', '#FC4E07')) +
theme_minimal()
p <- ggplot(data=economics, aes(x=date, y=psavert)) +
geom_line(color='#00AFBB', size=1)
p
p + scale_x_date(limits=c(min,max))
p + scale_x_date(limits=c(min,max))
min <- as.Date("2002-1-1")
max <- NA
p + scale_x_date(limits=c(min,max))
p + scale_x_date(date_labels='%b/%Y')
p + stat_smooth(
color='#FC4E07', fill='#FC4E07', method='loess'
)
library('TTR')
library(TTR)
install.packages('TTR', dependencies=TRUE)
library
library(TTR)
p <- ggplot(data=economics, aes(x=date, y=psavert)) +
geom_line(color='#00AFBB', size=1)
mm <- SMA(economics$psavert, n=8)
p + geom_line(aes(x=date, y=mm))
demo()
require(fastR2);
install.packages(fastR2)
glimpse(irs)
source('~/Desktop/intro_r.R', echo=TRUE)
install.packages("fastR2")
glimpse(iris)
library(fastR2)
glimpse(iris)
head(iris, n=3)
tail(iris, n=3)
iris[50:51, 3:5]
iris[50:51, 3:4]
sample(iris, 6)
iris$Sepal.Length
snippet("data01")
gf_point(iris$Sepal.Length ~ iris$Sepal.Width, data = iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris)
gf_point(Sepal.Length ~ Sepal.Width | Species, data = iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris) %>%
gf_facet_wrap(~ Species)
library(tidyr)
install.packages("tidyr")
install.packages("tidyr")
install.packages("tidyr", lib="~/R/library")
install.packages("tidyr", lib = "~/R/library")
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
library(fastR2)
glimpse(iris)
gf_point(Sepal.Length ~ Sepal.Width, data = iris,
color = ~ Species, shape = ~ Species, alpha = 0.7)
tally(~ Species, data = iris)
tally(iris$Species)
tally(iris$Species)
tally(~ Species, data = iris)
table(iris$Species)
table(iris$Sepal.Length)
table(iris$Species)
table(iris$Species)
table(iris$Sepal.Length)
tally(iris$Sepal.Length > 6.0)
tally(cut(iris$Sepal.Length, breaks = 2:10))
gf_histogram(iris$Sepal.Length)
gf_histogram(~ Sepal.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris, binwidth = 0.5)
gf_histogram(~ Sepal.Length, data = iris, binwidth = 0.5, boundary = 8)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
iris$Sepal.Length
iris$Sepal.Length > 7.0
iris$Sepal.Length[iris$Sepal.Length > 7.0]
gf_dhistogram( ~ Sepal.Length, data = iris,
breaks = c(4, 5, 5.5, 6, 6.5, 7, 8, 10), color = "black",
fill = "skyblue")
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 4, format = "interval"))
gf_histogram(~ Species.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris)
gf_histogram(~ Sepal.Length, data = iris, bins = 10)
gf_histogram(~ Sepal.Length, data = iris, bins = 2)
gf_histogram(~ Sepal.Length, data = iris, bins = 5)
gf_histogram(~ Sepal.Length, data = iris, bins = 10)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 2)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 0.5)
gf_histogram(~ Sepal.Length, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 4, format = "interval"))
gf_histogram(~ Sepal.Length, data = iris, bins = 15) %>%
gf_facet_wrap(~ ntiles(Sepal.Width, 2, format = "interval"))
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15, binwidth = 1)
gf_histogram(~ Sepal.Length | Species, bins = 15,
data = iris %>% filter(Species == "virginica"))
gf_freqpoly(~ Sepal.Length, color = ~ Species, data = iris,
binwidth = 9.5)
gf_freqpoly(~ Sepal.Length, color = ~ Species, data = iris,
binwidth = 0.5)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
gf_histogram( ~ duration, data = MASS::geyser, bins = 10)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
gf_histogram( ~ duration, data = MASS::geyser, bins = 10)
gf_histogram( ~ duration, data = MASS::geyser, bins = 1)
gf_histogram( ~ duration, data = MASS::geyser, bins = 100)
gf_histogram( ~ duration, data = MASS::geyser, bins = 20)
# Measures of central tendency
mean(~ Sepal.Length, data = irs)
# Measures of central tendency
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Width, data = iris)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_histogram(~ Sepal.Width, data = iris, bins = 15)
gf_histogram(~ Sepal.Length, data = iris, bins = 15)
gf_dhistogram(~ Sepal.Length, data = iris, bins = 15)
gf_dhistogram(~ Sepal.Width, data = iris, bins = 15)
mean(~ Sepal.Length ~ Species, data = iris)
mean(Sepal.Length ~ Species, data = iris)
mean(Sepal.Width ~ Species, data = iris)
median(Sepal.Length ~ Species, data = iris)
median(Sepal.Width ~ Species, data = iris)
df_stats(Sepal.Length ~ Species, data = iris, mean, median)
gf_histogram(~ Sepal.Length | Species, data = iris, bins = 15)
stem(MASS::geyser$duration)
stem(iris$Sepal.Length)
mean(~ Sepal.Length, data = iris, trim = 0.1)
)
mean(~ Sepal.Length, data = iris
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Length, data = iris, trim = 0.1)
mean(~ Sepal.Length, data = iris)
mean(~ Sepal.Length, data = iris, trim = 0.1)
mean(~ Sepal.Length | Species, data = iris)
mean(~ Sepal.Length | Species, data = iris, trim = 0.1)
# Measures of dispesion
quantile((1:10)^2)
gf_boxplot(Sepal.Length ~ Species, data = iris)
gf_boxplot(Sepal.Length ~ Species, data = iris) %>%
gf_refine(coord_flip())
gf_boxplot(duration ~ "", data = MASS::geyser) %>%
gf_refine(coord_flip())
var(Sepal.Length ~ Species, data = iris)
sd(Sepal.Length ~ Species, data = iris)
inspect(iris)
tally(death ~ victim, data = DeathPenalty)
tally(death ~ defendant | victim, data = DeathPenalty)
snippet("death-penalty03")
install.packages("vcd")
snippet("death-penalty03")
tally(death ~ defendant | victim, data = DeathPenalty)
tally(death ~ victim, data = DeathPenalty)
seq(0, 10, length.out = 500)
a <- 3
b <- 1
x <- seq(0, 10, length.out = 500)
y <- dgamma(x, a, b)
plot(x, w, type = "l", lwd = 2, col = "blue")
plot(x, y, type = "l", lwd = 2, col = "blue")
a <- 3
b <- 1
xx <- seq(0, 10, length.out = 500)
y <- dgamma(x, a, b)
plot(xx, y, type = "l", lwd = 2, col = "blue")
n <- 100
x <- rgamma(n)
x <- rgamma(n, a, b)
x
hist(x)
hist(x, breaks = "FD")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T)
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 2)
n <- 100
x <- rgamma(n, a, b)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 1)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
x_bar <- mean(x)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
s2 <- var(x)
s2 <- var(x)
((n-1)/n)*s2
x_bar <- mean(x)
sigma2_hat <- 1/n*sum((x - x_bar)^2)
s2 <- var(x)
((n-1)/n)*s2
a_tilde <- (x_bar^2)/(sigma2_hat)
b_tilde <- x_bar / sigma2_hat
a
b
a_tilde <- (x_bar^2)/(sigma2_hat)
b_tilde <- x_bar / sigma2_hat
(a_tile, a)
c(a_tilde, a)
c(b_tilde, b)
a_tilde <- (x_bar^2)/(sigma2_hat^2)
b_tilde <- x_bar / sigma2_hat^2
c(a_tilde, a)
xx <- seq(0, 10, length.out = 500)
y <- dgamma(xx, a_tilde, b_tilde)
hist(x, breaks = "FD", probability = T, border = "white")
box(lwd = 1)
library(tidyverse)
library(ggplot2)
library(dplyr)
n <- 16
x_bar <- 113.5
sigma <- sqrt(100)
alpha <- 0.05
# Estadistica t = (x_bar - 110) / (sigma/sqrt(n))
t_x <- (x_bar - 110) / (sigma / sqrt(n))
t_x
qnorm(0.95)
# p-value P[X_bar >= 113.5 | mu = 110] => P[Z >= t_x]
p_value <- 1 - pnorm(t_x)
p_value > alpha # Aceptamos H0
# b)
# Área de Rechazo
rech <- qnorm(1-alpha)
x <- seq(-3, 3, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.5)
alpha <- 0.01
rech <- qnorm(1-alpha)
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = t_x)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= t_x), fill = "lightpink", alpha = 0.8)
qnorm(0.95)
qnorm(0.95)
qnorm(0.975)
qnorm(0.995)
pnorm(t_x)
t_x
n <- 1000
p0 <- 0.5
p <- 560/1000
alpha <- 0.05
Z <- (p - p0) / sqrt((0.5*(1-0.5))/1000)
abs(Z) > qnorm(1-alpha)
cor.test(c(32, 18, 25), c(7, 20, 9))
library(tidyverse)
library(ggplot2)
library(dplyr)
library(GGally)
library(plotly)
alfa = 0.05
lambda = 15
nueva_tasa = 10
pvalue = ppois(q=nueva_tasa, lambda=lambda)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa
(", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (",
alfa, ")")
}
rech <- qpois(1-alpha, lambda=15)
x <- seq(0, 30, by = 1)
df <- data.frame(x=x, y=dpois(x, 15))
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = qpois(1-alpha, lambda=10))) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= qpois(1-alpha, lambda=10)), fill = "lightpink", alpha = 0.5)
n = 1000
alfa = 0.05
Z_alfa = qnorm(1-alfa)
p = 0.5
p_hat = 560/1000
Z = (p_hat - p) / sqrt((p*(1-p))/n)
pvalue = 1-pnorm(Z)
if (pvalue > alfa) {
paste("No se puede rechazar H0 pues el p-value (", pvalue, ") es mayor que alfa (", alfa, ")")
} else {
paste("Se rechaza H0 pues el p-value (", pvalue, ") es menor que alfa (", alfa, ")")
}
# RESULTADO ---------------------------------
# Se rechaza H0 pues p-value < alfa
# pvalue = 7.39011551672553e-05
# alfa = 0.05
# GRÁFICA -----------------------------------
x <- seq(-4.5, 4.5, by = 0.1)
df <- data.frame(x=x, y=dnorm(x))
rech <- Z_alfa
ggplot(df, aes(x=x, y=y)) + geom_line(color="steelblue") +
geom_vline(aes(xintercept = Z)) +
geom_area(data = df %>% filter(x >= rech), fill = "steelblue", alpha = 0.6) +
geom_area(data = df %>% filter(x >= Z), fill = "lightpink", alpha = 0.5)
getwd()
setwd("/Users/nestorivanmo/Desktop/iimas-data-science/spring-21/metest/tareas/2")
data <- read.csv('nfl.csv')
summary(data)
nrow(data)
ncol(data)
fig <- plot_ly(
x = seq(1,28),
y = data$y,
type = "bar",
marker=list(color=c(
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(222,45,38,0.8)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)',
'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(204,204,204,1)', 'rgba(222,45,38,0.8)'
))
)
fig <- fig %>% layout(
title="Juegos ganados por 28 equipos de la NFL para 1976",
yaxis=list(title="Juegos ganados"),
xaxis=list(title="Equipos de la NFL")
)
fig
fig <- plot_ly(y = data$x1, type = "box", name='X1: Yardas por tierra')
fig <- fig %>% add_trace(y = data$x2, name='X2: Yardas por aire')
fig <- fig %>% add_trace(y = data$x8, name='X8: Yardas por tierra del contrario ')
fig <- fig %>% add_trace(y = data$x9, name='X9: Yardas por aire del contrario')
fig
fig <- plot_ly(y = data$y, type = "box", name='Juegos ganados')
fig
ggpairs(data)
correlations <- c()
y <- data$y
col_idx <- c()
most_corr <- 0
most_corr_col_idx <- -1
for (i in 2:ncol(data)) {
corr <- cor.test(y, data[, i])$estimate
if (abs(corr) > abs(most_corr)){
most_corr <- corr
most_corr_col_idx <- i
}
correlations <- c(correlations, corr)
col_idx <- c(col_idx, i)
}
corr_df <- data.frame(col_idx, correlations)
corr_df <- corr_df[order(corr_df$correlations, decreasing=TRUE), ]
paste("La columna más correlacionada es X", most_corr_col_idx-1, "con un valor de",
most_corr)
set.seed(100)
training_row_idx <- sample(1:nrow(data), 0.8*nrow(data))
training_data <- data[training_row_idx, ]
test_data <- data[-training_row_idx, ]
lmMod <- lm(y ~ x8, data = training_data)
pred <- predict(lmMod, test_data, interval = "prediction")
summary(lmMod)
print(lmMod)
actual_preds <- data.frame(cbind(actuals=test_data$y, predicted=pred))
correlation_acc <- cor(actual_preds)
correlation_acc
actual_preds
min_max_acc <- mean(apply(actual_preds, 1, min) / apply(actual_preds, 1, max))
min_max_acc
plot(data$x8, data$y,
main = "Y vs. X8",
pch=16,
xlab='Yardas terrestres del contrario',
ylab='Juegos ganados')
abline(lmMod, col='steelblue')
coef(lmMod)
